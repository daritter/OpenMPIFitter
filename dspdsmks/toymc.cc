#include <cstdlib>
#include <iostream>
#include <fstream>
#include <MPIFitter.h>
#include <Parameters.h>
#include "DspDsmKs.h"
#include "progress.h"

#include <TFile.h>
#include <TH2D.h>
#include <TH1D.h>

#include <boost/program_options.hpp>
#include <boost/algorithm/string.hpp>

namespace po = boost::program_options;

struct ToyMCRoutine {
    /** Set some default options */
    ToyMCRoutine(): parameterIn("params-in.txt"), output("toymc.root")
    {}

    std::string parameterIn;
    std::string overrideParameters;
    std::string output;

    /** Do the plotting */
    template<class FCN> int operator()(FCN &parallel_pdf){
        const Range range_mBC = parallel_pdf.localFCN().getRange_mBC();
        const Range range_dE = parallel_pdf.localFCN().getRange_dE();
        const Range range_dT = parallel_pdf.localFCN().getRange_dT();

        Parameters params;
        if(!params.load(parameterIn, overrideParameters)){
            return 2;
        }
        std::vector<double> par = params.getValues();

        //Now we need to get the maximal value of the pdf
        double step_mBC = (range_mBC.vmax-range_mBC.vmin)/100;
        double step_dE = (range_dE.vmax-range_dE.vmin)/100;
        double step_dT = 0.01;
        double min_dT = -4;
        double max_dT =  4;

        std::vector<double> values(10,0);
        values[0] = 5.289;
        values[1] = range_mBC.vmin;
        values[2] = range_mBC.vmax;
        values[3] = step_mBC;
        values[4] = range_dE.vmin;
        values[5] = range_dE.vmax;
        values[6] = step_dE;
        values[7] = min_dT;
        values[8] = max_dT;
        values[9] = step_dT;
        double maxVal[2];
        double fudge = 1.2;
        maxVal[0] = fudge*parallel_pdf.plot(DspDsmKsPDF::PLT_SVD1 | DspDsmKsPDF::PLT_MAX, values, par, OP_MAX);
        maxVal[1] = fudge*parallel_pdf.plot(DspDsmKsPDF::PLT_SVD2 | DspDsmKsPDF::PLT_MAX, values, par, OP_MAX);

        //Parallel is done now, rest is only possible in single core. Close all other processes and reload all data
        parallel_pdf.close();
        DspDsmKsPDF &local_pdf = parallel_pdf.localFCN();
        local_pdf.load(0,1);

        TFile* f = new TFile(output.c_str(),"RECREATE");
        TTree* tree = new TTree("B0","B0 Toy MC");
        local_pdf.generateToyMC(tree,par,maxVal,1);
        tree->Write();
        f->Write();
        f->Close();
        return 0;
    }
};




/** This is the main function and will be called on all processes with the same
 * arguments.
 *
 * Here we have to setup everything: Parse the program options and set the
 * corresponding variables in the fitting routine and the PDF if any. PDF and
 * Fit function are created here and passed to the MPIFitter for execution.
 * Loading of the acutal data is performed by the MPIFitter and then the
 * FitRoutine is called with a modified PDF which handles the multiprocessing
 */
int main(int argc, char* argv[]){

    //FitRoutine fitter;
    ToyMCRoutine toymc;
    std::vector<std::string> files;
    Range range_mBC(5.24,5.3);
    Range range_dE(-0.15,0.1);
    Range range_dT(-70,70);
    std::string bestB("bestLHsig");
    DspDsmKsPDF::EnabledComponents activeComponents = DspDsmKsPDF::CMP_all;
    std::string componentList;

    /** Read program options using boost::program_options. Could be anything else */
    po::options_description desc("Avast, thy options be:");
    desc.add_options()
        ("help,h", "produce this finely crafted help message")
        ("config,c", po::value<std::string>()->default_value("config.ini"),
         "Config file with standard parrrrameters")
        ("input", po::value<std::vector<std::string> >(&files)->composing(),
         "Root files containing the data")
        ("output", po::value<std::string>(&toymc.output)->default_value(toymc.output),
         "The name of thy rrroot file to store the events generated by this fine programme")
        ("parameter-out,i", po::value<std::string>(&toymc.parameterIn)->default_value(toymc.parameterIn),
         "Thy file to pillage thy parrrametes from")
        ("minMbc", po::value<float>(&range_mBC.vmin)->default_value(range_mBC.vmin),
         "The minimal Mbc value for the fit")
        ("maxMbc", po::value<float>(&range_mBC.vmax)->default_value(range_mBC.vmax),
         "The maximal Mbc value for the fit")
        ("mindE", po::value<float>(&range_dE.vmin)->default_value(range_dE.vmin),
         "The minimal dE value for the fit")
        ("maxdE", po::value<float>(&range_dE.vmax)->default_value(range_dE.vmax),
         "The maximal dE value for the fit")
        ("mindT", po::value<float>(&range_dT.vmin)->default_value(range_dT.vmin),
         "The minimal dT value for the fit")
        ("maxdT", po::value<float>(&range_dT.vmax)->default_value(range_dT.vmax),
         "The maximal dT value for the fit")
        ("bestB", po::value<std::string>(&bestB)->default_value(bestB),
         "BestB Selection method to use")
        ("cmp", po::value<std::string>(&componentList)->default_value(componentList),
         "Components to use for the fit")
        ("override", po::value<std::string>(&toymc.overrideParameters)->default_value(toymc.overrideParameters),
         "Aye, give the order to be modyfying parrrameters given with this list")
        ;

    po::variables_map vm;
    po::positional_options_description pod;
    pod.add("input", -1);
    po::store(po::command_line_parser(argc, argv).options(desc).positional(pod).run(), vm);
    std::ifstream config(vm["config"].as<std::string>().c_str());
    if(config.is_open()){
        po::store(po::parse_config_file(config, desc, true), vm);
        config.close();
    }
    if (vm.count("help")) {
        std::cout << desc << "\n";
        return 1;
    }
    po::notify(vm);

    if(!componentList.empty()){
        try{
            activeComponents = DspDsmKsPDF::getComponents(componentList);
        }catch(std::invalid_argument &e){
            std::cout << e.what() << std::endl;
            return 2;
        }
    }

    DspDsmKsPDF pdf(range_mBC, range_dE, range_dT, files, bestB, activeComponents, 0);
    MPIFitter core;
    return core.run(toymc, pdf);
}
